// <auto-generated />
using System;
using MercadoTesteAZ.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MercadoTesteAZ.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Categorias.Categoria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Clientes.Cliente", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DadosContatoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PrimeiroNome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DadosContatoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Clientes.MeusDadosPagamento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClienteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("MeusDadosPagamentos");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Empresas.Vendedor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double?>("NotaAvaliacao")
                        .HasColumnType("double");

                    b.Property<int>("QtdDeVendas")
                        .HasColumnType("int");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Vendedores");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.MeiosDePagamento.CartaoDeCredito", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ClienteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DataVencimento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MeusDadosPagamentoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NomeTitular")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroDoCartao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MeusDadosPagamentoId");

                    b.ToTable("CartoesDeCredito");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.MeiosDePagamento.ContaBancaria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ContaPrincipal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("InstituicaoBancaria")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumConta")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TipoConta")
                        .HasColumnType("int");

                    b.Property<string>("VendedorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("VendedorId");

                    b.ToTable("ContasBancarias");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.MeiosDePagamento.PayPal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClienteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomeTitular")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("ContasPayPal");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Pedidos.Pedido", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClienteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EnderecoEntregaId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Frete")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("HorarioCompra")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PrecoTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("StatusPedido")
                        .HasColumnType("int");

                    b.Property<string>("VendedorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EnderecoEntregaId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Pedidos.PedidoProduto", b =>
                {
                    b.Property<string>("PedidoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProdutoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("PedidoId", "ProdutoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("PedidosProdutos");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Produtos.HistoricoPreco", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("HistoricosDePreco");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Produtos.Produto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CategoriaId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Estoque")
                        .HasColumnType("int");

                    b.Property<string>("Fabricante")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImagemURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("QtdVendida")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UltimaAtualizacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VendedorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.SharedValues.DadosContato", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DadosContatos");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.SharedValues.DadosGeograficos", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ClienteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("DadosGeograficos");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Usuário.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Clientes.Cliente", b =>
                {
                    b.HasOne("MercadoTesteAZ.Domain.Entities.SharedValues.DadosContato", "DadosContato")
                        .WithMany()
                        .HasForeignKey("DadosContatoId");

                    b.HasOne("MercadoTesteAZ.Domain.Entities.Usuário.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DadosContato");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Clientes.MeusDadosPagamento", b =>
                {
                    b.HasOne("MercadoTesteAZ.Domain.Entities.Clientes.Cliente", "Cliente")
                        .WithMany("MeusMeiosDePagamento")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Empresas.Vendedor", b =>
                {
                    b.HasOne("MercadoTesteAZ.Domain.Entities.Usuário.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.MeiosDePagamento.CartaoDeCredito", b =>
                {
                    b.HasOne("MercadoTesteAZ.Domain.Entities.Clientes.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MercadoTesteAZ.Domain.Entities.Clientes.MeusDadosPagamento", null)
                        .WithMany("MeusCartoes")
                        .HasForeignKey("MeusDadosPagamentoId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.MeiosDePagamento.ContaBancaria", b =>
                {
                    b.HasOne("MercadoTesteAZ.Domain.Entities.Empresas.Vendedor", "Vendedor")
                        .WithMany("ContasBancarias")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.MeiosDePagamento.PayPal", b =>
                {
                    b.HasOne("MercadoTesteAZ.Domain.Entities.Clientes.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Pedidos.Pedido", b =>
                {
                    b.HasOne("MercadoTesteAZ.Domain.Entities.Clientes.Cliente", "Cliente")
                        .WithMany("MeusPedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MercadoTesteAZ.Domain.Entities.SharedValues.DadosGeograficos", "EnderecoEntrega")
                        .WithMany()
                        .HasForeignKey("EnderecoEntregaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MercadoTesteAZ.Domain.Entities.Empresas.Vendedor", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("EnderecoEntrega");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Pedidos.PedidoProduto", b =>
                {
                    b.HasOne("MercadoTesteAZ.Domain.Entities.Pedidos.Pedido", "Pedido")
                        .WithMany("ProdutosComprados")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MercadoTesteAZ.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Produtos.HistoricoPreco", b =>
                {
                    b.HasOne("MercadoTesteAZ.Domain.Entities.Produtos.Produto", "Produto")
                        .WithMany("HistoricoDePrecos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Produtos.Produto", b =>
                {
                    b.HasOne("MercadoTesteAZ.Domain.Entities.Categorias.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MercadoTesteAZ.Domain.Entities.Empresas.Vendedor", "Vendedor")
                        .WithMany("MeusProdutos")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.SharedValues.DadosGeograficos", b =>
                {
                    b.HasOne("MercadoTesteAZ.Domain.Entities.Clientes.Cliente", "Cliente")
                        .WithMany("MeusEnderecosDeEntrega")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Categorias.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Clientes.Cliente", b =>
                {
                    b.Navigation("MeusEnderecosDeEntrega");

                    b.Navigation("MeusMeiosDePagamento");

                    b.Navigation("MeusPedidos");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Clientes.MeusDadosPagamento", b =>
                {
                    b.Navigation("MeusCartoes");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Empresas.Vendedor", b =>
                {
                    b.Navigation("ContasBancarias");

                    b.Navigation("MeusProdutos");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Pedidos.Pedido", b =>
                {
                    b.Navigation("ProdutosComprados");
                });

            modelBuilder.Entity("MercadoTesteAZ.Domain.Entities.Produtos.Produto", b =>
                {
                    b.Navigation("HistoricoDePrecos");
                });
#pragma warning restore 612, 618
        }
    }
}
